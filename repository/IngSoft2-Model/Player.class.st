Class {
	#name : #Player,
	#superclass : #Object,
	#instVars : [
		'name',
		'cardCollection'
	],
	#category : #'IngSoft2-Model'
}

{ #category : #asserting }
Player class >> assertWithValidName: aName [
	aName size <= 0
		ifTrue: [ AssertionFailure signal: 'You cant create a player without a name' ]
]

{ #category : #initialization }
Player class >> named: aName with: aCardCollection [
	self assertWithValidName: aName.
	^ self new initializeWithName: aName andCardCollection: aCardCollection
]

{ #category : #adding }
Player >> addCard: aCard [
	cardCollection add: aCard
]

{ #category : #playing }
Player >> cancellationTargetIs: aTarget [
	cardCollection
		detect: [ :each | each name = 'Cancellation' ]
		ifFound: [ :found | 
			found selectTarget: aTarget  ]
		ifNone: [ AssertionFailure signal: 'You dont have that card' ]
]

{ #category : #initialization }
Player >> initializeWithName: aName andCardCollection: aCardCollection [
	name := aName.
	cardCollection := aCardCollection.
]

{ #category : #accessing }
Player >> name [
	^ name
]

{ #category : #playing }
Player >> removeCard: aCardName [
	cardCollection detect: [ :each | each name = aCardName ] ifFound: [ :found | cardCollection remove: found ]
]

{ #category : #playing }
Player >> roll: diceCollection [
	| rollNumber |
	rollNumber := diceCollection sumNumbers: [ :dice | dice roll ].
	^ rollNumber
]

{ #category : #playing }
Player >> useCardNamed: aName [
	cardCollection
		detect: [ :each | each name = aName ]
		ifFound: [ :found | ^ found ]
		ifNone: [ AssertionFailure signal: 'You dont have that card' ]
]
